generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  username          String         @unique() @db.VarChar(12)
  email             String         @unique() @db.VarChar(254)
  profilePictureUrl String
  password          String
  sessionTokens     SessionToken[]
  Post              Post[]
  Comment           Comment[]

  @@index([id])
}

model SessionToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([id])
}

model Post {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  description String    @db.Text
  likes       Int       @default(0)
  views       Int       @default(0)
  imageUrls   String[]
  artists     Artist[]
  comments    Comment[]
  tags        Tag[]
  author      User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId    String?

  @@index([id])
}

model Comment {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  content         String    @db.VarChar(100)
  replies         Comment[] @relation(name: "replies")
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          String
  parentComment   Comment?  @relation(name: "replies", fields: [parentCommentId], references: [id], onDelete: SetNull)
  parentCommentId String?
  author          User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId        String?
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(40)
  posts Post[]
}

model Artist {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(40)
  posts Post[]
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @default(uuid())
  username               String          @unique() @db.VarChar(12)
  createdAt              DateTime        @default(now())
  email                  String          @unique() @db.VarChar(254)
  profilePictureUrl      String
  password               String
  sessionTokens          SessionToken[]
  createdPosts           Post[]          @relation(name: "created posts")
  likedPosts             Post[]          @relation(name: "liked posts")
  createdComments        Comment[]
  friends                User[]          @relation("user friends")
  symmetricFriends       User[]          @relation("user friends")
  sentFriendRequests     FriendRequest[] @relation(name: "friend requests sent")
  receivedFriendRequests FriendRequest[] @relation(name: "friend requests received")

  @@index([id])
}

model SessionToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([id])
}

model Post {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  description String       @db.Text
  likes       Int          @default(0)
  views       Int          @default(0)
  imageUrls   String[]
  artists     Artist[]
  comments    Comment[]
  tags        Tag[]
  author      User?        @relation(name: "created posts", fields: [authorId], references: [id], onDelete: SetNull)
  authorId    String?
  likedBy     User[]       @relation(name: "liked posts")
  postReports PostReport[]

  @@index([id])
}

model Comment {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  content         String    @db.VarChar(350)
  replies         Comment[] @relation(name: "replies")
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          String
  parentComment   Comment?  @relation(name: "replies", fields: [parentCommentId], references: [id], onDelete: SetNull)
  parentCommentId String?
  author          User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId        String?
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(40)
  posts Post[]

  @@index([name])
}

model Artist {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(40)
  posts Post[]

  @@index([name])
}

model FriendRequest {
  id             String   @unique @default(uuid())
  sentAt         DateTime @default(now())
  senderUser     User     @relation(name: "friend requests sent", fields: [senderUserId], references: [id], onDelete: Cascade)
  senderUserId   String
  receiverUser   User     @relation(name: "friend requests received", fields: [receiverUserId], references: [id], onDelete: Cascade)
  receiverUserId String

  @@id([senderUserId, receiverUserId])
  @@index([senderUserId, receiverUserId])
}

enum PostReportReviewStatus {
  NOT_REVIEWED
  IN_REVIEW
  REJECTED
  ACCEPTED
}

model PostReport {
  id           String                 @id @default(uuid())
  category     String
  description  String                 @db.Text
  reviewStatus PostReportReviewStatus
  post         Post?                  @relation(fields: [postId], references: [id])
  postId       String?
}

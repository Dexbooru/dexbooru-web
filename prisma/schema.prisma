generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(uuid())
  username                 String                    @unique() @db.VarChar(12)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now())
  email                    String                    @unique() @db.VarChar(254)
  profilePictureUrl        String
  password                 String
  createdPosts             Post[]                    @relation(name: "created posts")
  likedPosts               Post[]                    @relation(name: "liked posts")
  createdComments          Comment[]
  friends                  User[]                    @relation("user friends")
  symmetricFriends         User[]                    @relation("user friends")
  sentFriendRequests       FriendRequest[]           @relation(name: "friend requests sent")
  receivedFriendRequests   FriendRequest[]           @relation(name: "friend requests received")
  passwordRecoveryAttempts PasswordRecoveryAttempt[]
  postCollections          PostCollection[]          @relation(name: "post collection author")

  @@index([id])
}

model Post {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now())
  description  String           @db.Text
  isNsfw       Boolean          @default(false)
  likes        Int              @default(0)
  views        Int              @default(0)
  imageUrls    String[]
  artists      Artist[]
  commentCount Int              @default(0)
  comments     Comment[]
  tags         Tag[]
  author       User?            @relation(name: "created posts", fields: [authorId], references: [id], onDelete: SetNull)
  authorId     String?
  likedBy      User[]           @relation(name: "liked posts")
  reports      PostReport[]
  collections  PostCollection[]

  @@index([id])
  @@index([authorId])
}

model PostCollection {
  id        String   @id @default(uuid())
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  author    User?    @relation(name: "post collection author", fields: [authorId], references: [id])
  authorId  String?
}

model Comment {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  content         String    @db.VarChar(1500)
  replies         Comment[] @relation(name: "replies")
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          String
  parentComment   Comment?  @relation(name: "replies", fields: [parentCommentId], references: [id], onDelete: SetNull)
  parentCommentId String?
  author          User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId        String?

  @@index([authorId])
  @@index([postId])
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(75)
  posts Post[]

  @@index([name])
}

model Artist {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(75)
  posts Post[]

  @@index([name])
}

model FriendRequest {
  id             String   @unique @default(uuid())
  sentAt         DateTime @default(now())
  senderUser     User     @relation(name: "friend requests sent", fields: [senderUserId], references: [id], onDelete: Cascade)
  senderUserId   String
  receiverUser   User     @relation(name: "friend requests received", fields: [receiverUserId], references: [id], onDelete: Cascade)
  receiverUserId String

  @@id([senderUserId, receiverUserId])
  @@index([senderUserId, receiverUserId])
}

enum PostReportReviewStatus {
  NOT_REVIEWED
  IN_REVIEW
  REJECTED
  ACCEPTED
}

model PostReport {
  id           String                 @id @default(uuid())
  category     String
  description  String                 @db.Text
  reviewStatus PostReportReviewStatus
  post         Post?                  @relation(fields: [postId], references: [id])
  postId       String?
}

model PasswordRecoveryAttempt {
  id              String   @id
  createdAt       DateTime @default(now())
  senderIpAddress String   @db.VarChar(15)
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?

  @@index([id])
}
